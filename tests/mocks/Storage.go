// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	postgres "taskList/internal/database/sql/postgres"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: login, item
func (_m *Storage) AddItem(login string, item postgres.Item) error {
	ret := _m.Called(login, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, postgres.Item) error); ok {
		r0 = rf(login, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteItem provides a mock function with given fields: login, item
func (_m *Storage) DeleteItem(login string, item postgres.Item) error {
	ret := _m.Called(login, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, postgres.Item) error); ok {
		r0 = rf(login, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields:
func (_m *Storage) Disconnect() {
	_m.Called()
}

// Login provides a mock function with given fields: _a0
func (_m *Storage) Login(_a0 postgres.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(postgres.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Registration provides a mock function with given fields: _a0
func (_m *Storage) Registration(_a0 postgres.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(postgres.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
